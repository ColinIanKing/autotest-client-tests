diff --git a/scripts/runtime.bash b/scripts/runtime.bash
index 1bd87bc..02f999c 100644
--- a/scripts/runtime.bash
+++ b/scripts/runtime.bash
@@ -29,7 +29,7 @@ premature_failure()
 get_cmdline()
 {
     local kernel=$1
-    echo "TESTNAME=$testname TIMEOUT=$timeout ACCEL=$accel $RUNTIME_arch_run $kernel -smp $smp $opts"
+    echo "$RUNTIME_arch_run $kernel -smp $smp $opts"
 }
 
 skip_nodefault()
@@ -71,12 +71,12 @@ function run()
 
     if [ -z "$only_group" ] && grep -qw "nodefault" <<<$groups &&
             skip_nodefault; then
-        echo -e "`SKIP` $testname (test marked as manual run only)"
+    #    echo -e "`SKIP` $testname (test marked as manual run only)"
         return;
     fi
 
     if [ -n "$arch" ] && [ "$arch" != "$ARCH" ]; then
-        echo "`SKIP` $1 ($arch only)"
+    #    echo "`SKIP` $1 ($arch only)"
         return 2
     fi
 
@@ -87,37 +87,37 @@ function run()
         path=${check_param%%=*}
         value=${check_param#*=}
         if [ "$path" ] && [ "$(cat $path)" != "$value" ]; then
-            echo "`SKIP` $1 ($path not equal to $value)"
+    #        echo "`SKIP` $1 ($path not equal to $value)"
             return 2
         fi
     done
 
     last_line=$(premature_failure) && {
-        echo "`SKIP` $1 ($last_line)"
+    #    echo "`SKIP` $1 ($last_line)"
         return 77
     }
 
     cmdline=$(get_cmdline $kernel)
     if [ "$verbose" = "yes" ]; then
-        echo $cmdline
+        echo $testname ":" $cmdline
     fi
 
     # extra_params in the config file may contain backticks that need to be
     # expanded, so use eval to start qemu.  Use "> >(foo)" instead of a pipe to
     # preserve the exit status.
-    summary=$(eval $cmdline 2> >(RUNTIME_log_stderr) \
-                             > >(tee >(RUNTIME_log_stdout $kernel) | extract_summary))
-    ret=$?
-
-    if [ $ret -eq 0 ]; then
-        echo "`PASS` $1 $summary"
-    elif [ $ret -eq 77 ]; then
-        echo "`SKIP` $1 $summary"
-    elif [ $ret -eq 124 ]; then
-        echo "`FAIL` $1 (timeout; duration=$timeout)"
-    else
-        echo "`FAIL` $1 $summary"
-    fi
+    #summary=$(eval $cmdline 2> >(RUNTIME_log_stderr) \
+    #                         > >(tee >(RUNTIME_log_stdout $kernel) | extract_summary))
+    #ret=$?
+
+    #if [ $ret -eq 0 ]; then
+    #    echo "`PASS` $1 $summary"
+    #elif [ $ret -eq 77 ]; then
+    #    echo "`SKIP` $1 $summary"
+    #elif [ $ret -eq 124 ]; then
+    #    echo "`FAIL` $1 (timeout; duration=$timeout)"
+    #else
+    #    echo "`FAIL` $1 $summary"
+    #fi
 
     return $ret
 }
