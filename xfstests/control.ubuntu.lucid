TIME="LONG"
AUTHOR = "Cleber Rosa <cleber@redhat.com>"
NAME = 'xfs filesystem test suite'
TEST_CLASS = 'kernel'
TEST_CATEGORY = 'Functional'
TEST_TYPE = 'client'
DOC = """
xfstests in autotest
--------------------

This is a simple wrapper for running xfstests inside autotest. The steps to get
started are really simple:

1) Edit the configuration variables on the control file.

1.1) The variables 'TEST_DEV' and 'TEST_DIR' are mandatory and should be set to
     a block device path and mount point path, respectively, that will be used
     *exclusively* for xfstests. It must have the filesystem of your choice
     previously created.

     DO NOT USE A BLOCK DEVICE WITH IMPORTANT DATA!!!

1.2) Set the range of tests you want to run setting the TEST_RANGE variable.
     Please notice that python's range() function may not work as you expect,
     that is, if you want a range from 0-255, use: range(0, 256)

2) Run the tests (assuming autotest installed in /usr/local/autotest):

   # cd /usr/local/autotest/client/tests/xfstests
   # ../../bin/autotest control

3) Check the HTML report at

   /usr/local/autotest/client/results/default/job_report.html

General notes
-------------

* As autotest includes a setup phase for client tests, this step is encapsulated
in a dummy xfstests number 000.

* XFS utilities, system libraries and header files are checked early, before
trying to build xfstests. Make sure you resolve those dependencies.

* Some tests are not relevant to filesystems other than XFS, so they will return
as TEST_NA.

* Be extra careful when using TEST_DEV with device-mapper based block devices.
For instance, xfstests may not be able to figure out that /dev/<vg>/<lv> is
actually a link to /dev/mapper/vg-lv. Tests will then fail to check that the
device is mounted.

* As a convenience the default config file uses a virtual partition, so people
can try it out the tests without having an actual spare device. However the
virtual partition depends on the following programs to be available:
     * sfdisk
     * losetup
     * kpartx
Make sure you have them or a real spare device to test things.
"""
# Define the partitions you want to use.
#
# Here, by default we use the concept of virtual partition (a partition of 1GB
# of size), to avoid setup by the user. However, you'll most likely use a real
# block device for your tests.
from autotest.client import partition
file_img = os.path.join(job.tmpdir, 'xfstests.img')

# Get the device name from the arguments passed in
argdict = {}
for uarg in args:
    key, val = uarg.split('=')
    argdict[key] = val

# for debugging if needed
#print "argdict = ", argdict

# You can use a real block device, such as /dev/sdc1
#device='/dev/sdb1'
scratch_device = argdict['UBUNTU_SCRATCH_DEVICE']
device = '%s1' % scratch_device
os.environ['XFSTESTS_TEST_DRIVE'] = scratch_device

# By default, we create a directory under autotest
mountpoint = os.path.join(job.tmpdir, 'xfstests')
if not os.path.isdir(mountpoint):
    os.makedirs(mountpoint)

#
# Job configuration, instead of editing xfstests config files, set them
# right here as environment variables
#

# TEST_DEV: "device containing TEST PARTITION"
os.environ['TEST_DEV'] = device

# TEST_DIR: "mount point of TEST PARTITION"
os.environ['TEST_DIR'] = mountpoint

# SCRATCH_DEV "device containing SCRATCH PARTITION"
#os.environ['SCRATCH_DEV'] = '/dev/sdb2'
os.environ['SCRATCH_DEV'] = '%s2' % scratch_device

# SCRATCH_MNT "mount point for SCRATCH PARTITION"
os.environ['SCRATCH_MNT'] = '/media/xfsmount'

# TAPE_DEV "tape device for testing xfsdump"
# os.environ['TAPE_DEV'] = ''

# RMT_TAPE_DEV "remote tape device for testing xfsdump"
# os.environ['RMT_TAPE_DEV'] = ''

# RMT_IRIXTAPE_DEV "remote IRIX tape device for testing xfsdump"
# os.environ['RMT_IRIXTAPE_DEV'] = ''

# SCRATCH_LOGDEV "device for scratch-fs external log"
os.environ['SCRATCH_LOGDEV'] = '/dev/sdb3'

# SCRATCH_RTDEV "device for scratch-fs realtime data"
# os.environ['SCRATCH_RTDEV'] = ''

# TEST_LOGDEV "device for test-fs external log"
# os.environ['TEST_LOGDEV'] = ''

# TEST_RTDEV "device for test-fs realtime data"
# os.environ['TEST_RTDEV'] = ''

# Whether UDF tests are disable
# os.environ['DISABLE_UDF_TEST'] = '1'

#
# Adapt to the list of tests you want to run
#
TEST_MATRIX = {
	    '000' : ['generic'],
	    '001' : ['generic'],
	    '002' : ['generic'],
	    '003' : ['xfs'],
	    '004' : ['xfs'],
	    #'005' : ['generic'],  # FIXME bjf - breaks oneiric testing (filesystem consistency check) (ext4)
	    #'006' : ['generic'],  # FIXME bjf - breaks oneiric testing (filesystem consistency check) (ext4)
	    #'007' : ['generic'],  # FIXME bjf - breaks oneiric testing (filesystem consistency check) (ext4)
	    '008' : ['xfs'],
	    '009' : ['xfs'],
	    #'010' : ['generic'], # ext4 fails 'dbtest was not built for this platform' dbtest fails to build/link
	    #'011' : ['generic'],  # FIXME bjf - breaks oneiric testing (filesystem consistency check) (ext4)
	    '012' : ['xfs'],
	    '013' : ['generic'],
	    '014' : ['generic'],
	    '015' : ['ext2', 'ext3', 'ext4', 'xfs'], # btrfs FS full behavior is different
	    #'016' : ['xfs'], # disabled because of http://www.digipedia.pl/usenet/thread/11980/7565/ it seems to rely on the same behavior
	    '017' : ['xfs'],
	    # '018' : ['xfs'], # disabled because of http://www.digipedia.pl/usenet/thread/11980/7565/
	    '019' : ['xfs'],
	    '020' : ['xfs', 'udf'],
	    '021' : ['xfs'],
	    #'022' : ['xfs'], # requires dump tape
	    #'023' : ['xfs'], # requires dump tape
	    #'024' : ['xfs'], # requires dump tape
	    #'025' : ['xfs'], # requires dump tape
	    '026' : ['xfs'],
	    '027' : ['xfs'],
	    '028' : ['xfs'],
	    '029' : ['xfs'],
	    '030' : ['xfs'],
	    '031' : ['xfs'],
	    '032' : ['xfs'],
	    '033' : ['xfs'],
	    '034' : ['xfs'],
	    #'035' : ['xfs'], # requires dump tape
	    #'036' : ['xfs'], # requires dump tape
	    #'037' : ['xfs'], # requires dump tape
	    #'038' : ['xfs'], # requires dump tape
	    #'039' : ['xfs'], # requires dump tape
	    #'040' : ['generic'], # only a test on the source tree
	    '041' : ['xfs'],
	    '042' : ['xfs'],
	    #'043' : ['xfs'], # requires dump tape
	    #'044' : ['xfs'],
	    '045' : ['xfs'],
	    '046' : ['xfs'],
	    '047' : ['xfs'],
	    '048' : ['xfs'],
	    '049' : ['xfs'],
	    '050' : ['xfs'],
	    '051' : ['xfs', 'udf'],
	    '052' : ['xfs'],
	    '053' : ['generic'],
	    '054' : ['xfs'],
	    #'055' : ['xfs'], # requires dump tape
	    '056' : ['xfs'],
	    #'057' : ['xfs'], # Test only valid on IRIX
	    #'058' : ['xfs'], # Test only valid on IRIX
	    #'059' : ['xfs'], # xfsdump multi-stream support required
	    #'060' : ['xfs'], # xfsdump multi-stream support required
	    '061' : ['xfs'],
	    #'062' : ['generic'],
	    # Fails for two reasons which result in inconsistent output for comparison
	    # First is that sometimes a lost+found directory is present in the mnount
	    # Second is that the getfattr utility doesn't always descend directories
	    #  in the same order when using the -R switch
	    '063' : ['xfs'],
	    '064' : ['xfs'],
	    '065' : ['xfs'],
	    '066' : ['xfs'],
	    '067' : ['xfs'],
	    #'068' : ['xfs'], # hangs sometimes
	    '069' : ['generic'],
	    '070' : ['generic'],
	    #'071' : ['xfs'], # TODO has errors, could be revisited
	    '072' : ['xfs'],
	    #'073' : ['xfs'],
	    '074' : ['generic'],
	    '075' : ['generic'],
	    '076' : ['generic'],
	    '077' : ['ext2', 'ext3', 'ext4', 'xfs'], # btrfs FS full behavior is different
	    '078' : ['xfs'],
	    '079' : ['generic'],
	    #'080' : ['xfs'], # this test calls scripts which are psrt of ltp in autotest, not set up
	    #'081' : ['xfs'], # disabled because of http://www.digipedia.pl/usenet/thread/11980/7565/
	    #'082' : ['xfs'], # disabled because of http://www.digipedia.pl/usenet/thread/11980/7565/
	    '083' : ['generic'],
	    '084' : ['xfs'],
	    '085' : ['xfs'],
	    '086' : ['xfs'],
	    '087' : ['xfs'],
	    '088' : ['generic'], # ext4 child process failed
	    '089' : ['generic'],
	    # '090' : ['xfs'], #  External volumes not in use, skipped this test, realtime volume test
	    '091' : ['generic'],
	    '092' : ['xfs'],
	    #'093' : ['generic'], # Test only valid on IRIX
	    # '094' : ['xfs'], #  External volumes not in use, skipped this test, realtime volume test
	    #'095' : ['xfs'], # Test only valid on IRIX
	    '096' : ['xfs'],
	    #'097' : ['generic'], # Test only valid on IRIX
	    #'098' : ['udf'], # Test only valid on IRIX
	    #'099' : ['generic'], # Test only valid on IRIX
	    '100' : ['generic'],
	    #'101' : ['udf'], # Test only valid on IRIX
	    '102' : ['udf'],
	    '103' : ['xfs'],
	    '104' : ['xfs'],
	    '105' : ['generic'],
	    #'106' : ['xfs'],
	    #'107' : ['xfs'],
	    '108' : ['xfs'],
	    '109' : ['xfs'],
	    '110' : ['xfs'],
	    '111' : ['xfs'],
	    '112' : ['generic'],
	    '113' : ['generic'],
	    #'114' : ['xfs'], # Test only valid on IRIX
	    #'115' : ['xfs'], # Test only valid on IRIX
	    '116' : ['xfs'],
	    '117' : ['generic'],
	    '118' : ['xfs'],
	    '119' : ['xfs'],
	    '120' : ['generic'],
	    '121' : ['xfs'],
	    #'122' : ['xfs'],
	    '123' : ['generic'],
	    '124' : ['generic'],
	    '125' : ['generic'],
	    '126' : ['generic'],
	    #'127' : ['generic'], # FIXME! (bjf) this test is hanging for some reason (nothing seems to be wrong with the system)
	    '128' : ['generic'],
	    '129' : ['generic'],
	    '130' : ['generic'],
	    '131' : ['generic'],
	    '132' : ['generic'],
	    '133' : ['generic'],
	    '134' : ['xfs'],
	    '135' : ['generic'],
	    #'136' : ['xfs'],
	    '137' : ['xfs'],
	    '138' : ['xfs'],
	    '139' : ['xfs'],
	    '140' : ['xfs'],
	    '141' : ['generic'],
	    #'142' : ['xfs'], # requires unsupported DMAPI
	    #'143' : ['xfs'], # requires unsupported DMAPI
	    #'144' : ['xfs'], # requires unsupported DMAPI
	    #'145' : ['xfs'], # requires unsupported DMAPI
	    #'146' : ['xfs'], # requires unsupported DMAPI
	    #'147' : ['xfs'], # requires unsupported DMAPI
	    #'148' : ['xfs'], # uses a utility tthat was IRIX only and no longer exists
	    #'149' : ['xfs'], # uses a utility tthat was IRIX only and no longer exists
	    #'150' : ['xfs'], # requires unsupported DMAPI
	    #'151' : ['xfs'], # requires unsupported DMAPI
	    #'152' : ['xfs'], # requires unsupported DMAPI
	    #'153' : ['xfs'], # requires unsupported DMAPI
	    #'154' : ['xfs'], # requires unsupported DMAPI
	    #'155' : ['xfs'], # requires unsupported DMAPI
	    #'156' : ['xfs'], # requires unsupported DMAPI
	    #'157' : ['xfs'], # requires unsupported DMAPI
	    #'158' : ['xfs'], # requires unsupported DMAPI
	    #'159' : ['xfs'], # requires unsupported DMAPI
	    #'160' : ['xfs'], # requires unsupported DMAPI
	    #'161' : ['xfs'], # requires unsupported DMAPI
	    #'162' : ['xfs'], # requires unsupported DMAPI
	    #'163' : ['xfs'], # requires unsupported DMAPI
	    '164' : ['xfs'],
	    #'165' : ['xfs'], # requires unsupported DMAPI
	    '166' : ['xfs'],
	    '167' : ['xfs'],
	    #'168' : ['xfs'], # requires unsupported DMAPI
	    '169' : ['generic'],
	    '170' : ['xfs'],
	    '171' : ['xfs'],
	    '172' : ['xfs'],
	    '173' : ['xfs'],
	    '174' : ['xfs'],
	    #'175' : ['xfs'], # requires unsupported DMAPI
	    #'176' : ['xfs'], # requires unsupported DMAPI
	    #'177' : ['xfs'], # requires unsupported DMAPI
	    '178' : ['xfs'],
	    '179' : ['xfs'],
	    '180' : ['xfs'],
	    '181' : ['xfs'],
	    '182' : ['xfs'],
	    '183' : ['xfs'],
	    '184' : ['generic'],
	    #'185' : ['xfs'], # requires unsupported DMAPI
	    '186' : ['xfs'],
	    '187' : ['xfs'],
	    '188' : ['xfs'],
	    '189' : ['xfs'],
	    '190' : ['xfs'],
	    #'191' : ['xfs'], # no mkfs support for NFS v4 ACLs
	    '192' : ['generic'],
	    '193' : ['generic'],
	    '194' : ['xfs'],
	    '195' : ['xfs'],
	    '196' : ['xfs'],
	    #'197' : ['xfs'],# This test is only valid on 32 bit machines
	    '198' : ['generic'],
	    '199' : ['xfs'],
	    '200' : ['xfs'],
	    '201' : ['xfs'],
	    '202' : ['xfs'],
	    '203' : ['xfs'],
	    '204' : ['generic'],
	    '205' : ['xfs'],
	    '206' : ['xfs'],
	    '207' : ['generic'],
	    '208' : ['generic'],
	    '209' : ['generic'],
	    '210' : ['generic'],
	    '211' : ['generic'],
	    '212' : ['generic'],
	    #'213' : ['ext4', 'xfs'], FIXME bjf - This test fails on most series (ext4)
	    '214' : ['ext4', 'xfs'],
	    '215' : ['generic'],
	    '216' : ['xfs'],
	    '217' : ['xfs'],
	    #'218' : ['xfs', 'ext4'],
	    # this test seems to be flawed, and fails. The two main reasons are this:
	    # 1) The filefrag utility reports differing numbers of extents edpending on whether
	    #    it is invoked with the -v switch http://lists.openwall.net/linux-ext4/2011/05/08/2
	    # 2) Creating files in an identical way can lead to results with differing numbers of
	    #    extents in the file
	    '219' : ['ext2', 'ext3', 'ext4'], # btrfs doesn't support quotas
	    '220' : ['xfs'],
	    '221' : ['generic'],
	    '222' : ['xfs'],
	    '223' : ['ext4', 'xfs'],
	    '224' : ['generic'],
	    '225' : ['generic'],
	    '226' : ['generic'],
	    '227' : ['xfs'],
	    '228' : ['ext4', 'xfs'],
	    #'229' : ['xfs'],
	    '230' : ['ext2', 'ext3', 'ext4', 'xfs'], # btrfs fails
	    '231' : ['ext2', 'ext3', 'ext4', 'xfs'], # btrfs fails
	    '232' : ['ext2', 'ext3', 'ext4', 'xfs'], # btrfs fails
	    '233' : ['ext2', 'ext3', 'ext4', 'xfs'], # btrfs fails
	    '234' : ['ext2', 'ext3', 'ext4', 'xfs'], # btrfs fails
	    '235' : ['ext2', 'ext3', 'ext4'], # btrfs doesn't support quotas
	    '236' : ['generic'],
	    '237' : ['generic'],
	    '238' : ['xfs'],
	    '239' : ['generic'],
	    '240' : ['generic'],
	    #'241' : ['generic'], # failed due to lack of dbench
	    '242' : ['xfs'],
	    '243' : ['ext4', 'xfs', 'btrfs', 'gfs2'],
	    '244' : ['xfs'],
	    '245' : ['generic'],
	    '246' : ['generic'],
	    '247' : ['generic'],
	    '248' : ['generic'],
	    '249' : ['generic'],
	    #'250' : ['xfs'],
	    '251' : ['xfs'], # was generic but ext4 - FSTRIM is not supported
	    #'252' : ['xfs'], # xfs_io fiemap support is missing
	    #'253' : ['xfs'], # xfs_io fiemap support is missing
	    '254' : ['btrfs'],
	    '255' : ['xfs'], # test case is marked generic, but xfs_io fiemap support is required
	    '256' : ['ext4', 'xfs'],
	    '257' : ['generic'],
	    '258' : ['generic'],
	    '259' : ['xfs'],
	    #'260' : ['xfs'], # was generic but ext4 - FSTRIM is not supported
	    '261' : ['xfs'],
	    '262' : ['xfs'],
	    '263' : ['generic'],
	    '264' : ['btrfs'],
	    '265' :  ['btrfs'],
	    #'266' : ['xfs'], # requires xfsdump -D
	    #'267' : ['xfs'], # requires dump tape
	    #'268' : ['xfs'], # requires dump tape
	    #'269' : ['generic'],                       # FIXME bjf - This is causing an oops on Natty
	    #'270' : ['ext3', 'ext4', 'xfs'],           # FIXME bjf - This test fails on most series (ext4)
	    '271' : ['ext4'],
	    #'272' : ['ext4'],                          # FIXME bjf - This is hanging on multiple series
	    #'273' : ['generic'], # ext4 fails
	    #'274' : ['ext4', 'xfs'],                   # FIXME bjf - This is hanging on Lucid
	    #'275' : ['generic'] # ext4 fails
}

#
# Choose the filesystem types you want the tests to run on
#
#FS_TYPES = ['ext2', 'ext3', 'ext4', 'xfs', 'btrfs']
FS_TYPES = ['ext4']

#
# Finally, run the tests
#

for fs_type in FS_TYPES:
    testlist = sorted(TEST_MATRIX.keys())
    for test in testlist:
    	if ('generic' in TEST_MATRIX[test]) or (fs_type in TEST_MATRIX[test]):
           tag = "%s.%s" % (test, fs_type)
           result = job.run_test_detail('xfstests', filesystem=fs_type, test_number=test, tag=tag, single=True)

