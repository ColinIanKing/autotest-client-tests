From 4afd5938ef6198a5717d3f4e18aa6e563e592e5a Mon Sep 17 00:00:00 2001
From: Colin Ian King <colin.king@canonical.com>
Date: Thu, 16 Sep 2021 13:25:45 +0000
Subject: [PATCH 1/3] Add build-time check for struct sockaddr_un

Unlikely, but this struct may not be defined, so add build time check
for it.

(Backport of upstream stress-ng commit 6b1474d10193abab75279db6d9d512abbf84b7b7)

Signed-off-by: Colin Ian King <colin.king@canonical.com>
---
 Makefile.config         |  8 ++++++++
 core-net.c              |  3 ++-
 stress-dccp.c           |  6 ++++--
 stress-epoll.c          |  6 ++++--
 stress-sctp.c           |  6 ++++--
 stress-socket-fd.c      |  4 ++++
 stress-socket.c         |  6 ++++--
 stress-udp.c            |  6 ++++--
 test/test-sockaddr_un.c | 35 +++++++++++++++++++++++++++++++++++
 9 files changed, 69 insertions(+), 11 deletions(-)
 create mode 100644 test/test-sockaddr_un.c

diff --git a/Makefile.config b/Makefile.config
index a3c3605d..407efb59 100644
--- a/Makefile.config
+++ b/Makefile.config
@@ -2299,6 +2299,14 @@ $(info autoconfig: using struct shminfo)
 endif
 endif
 
+ifndef $(HAVE_SOCKADDR_UN)
+HAVE_SOCKADDR_UN = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) TEST_PROG=test-sockaddr_un have_test_prog)
+ifeq ($(HAVE_SOCKADDR_UN),1)
+	CONFIG_CFLAGS += -DHAVE_SOCKADDR_UN
+$(info autoconfig: using struct sockaddr_un)
+endif
+endif
+
 ifndef $(HAVE_SWAPCONTEXT)
 HAVE_SWAPCONTEXT = $(shell $(MAKE) -f Makefile.config --no-print-directory $(HAVE_NOT) TEST_PROG=test-swapcontext have_test_prog)
 ifeq ($(HAVE_SWAPCONTEXT),1)
diff --git a/core-net.c b/core-net.c
index 21597d28..e6d4c9b7 100644
--- a/core-net.c
+++ b/core-net.c
@@ -139,7 +139,8 @@ void stress_set_sockaddr(
 		break;
 	}
 #endif
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	case AF_UNIX: {
 		static struct sockaddr_un addr;
 
diff --git a/stress-dccp.c b/stress-dccp.c
index 70f0d97a..20470258 100644
--- a/stress-dccp.c
+++ b/stress-dccp.c
@@ -171,7 +171,8 @@ retry:
 		(void)close(fd);
 	} while (keep_stressing());
 
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	if (dccp_domain == AF_UNIX) {
 		struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
@@ -341,7 +342,8 @@ again:
 die_close:
 	(void)close(fd);
 die:
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	if (addr && (dccp_domain == AF_UNIX)) {
 		struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
diff --git a/stress-epoll.c b/stress-epoll.c
index d364d3f0..f4d0f5b8 100644
--- a/stress-epoll.c
+++ b/stress-epoll.c
@@ -364,7 +364,8 @@ retry:
 		inc_counter(args);
 	} while (keep_stressing());
 
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	if (addr && (epoll_domain == AF_UNIX)) {
 		struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
@@ -532,7 +533,8 @@ die_close:
 	if (sfd != -1)
 		(void)close(sfd);
 die:
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	if (addr && (epoll_domain == AF_UNIX)) {
 		struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
diff --git a/stress-sctp.c b/stress-sctp.c
index 869b5fba..7b73968e 100644
--- a/stress-sctp.c
+++ b/stress-sctp.c
@@ -144,7 +144,8 @@ retry:
 		(void)close(fd);
 	} while (keep_stressing());
 
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	if (sctp_domain == AF_UNIX) {
 		struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
@@ -253,7 +254,8 @@ static int stress_sctp_server(
 die_close:
 	(void)close(fd);
 die:
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	if (addr && sctp_domain == AF_UNIX) {
 		struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
diff --git a/stress-socket-fd.c b/stress-socket-fd.c
index 3a29f249..566b3c78 100644
--- a/stress-socket-fd.c
+++ b/stress-socket-fd.c
@@ -189,8 +189,10 @@ retry:
 		(void)close(fd);
 	} while (keep_stressing());
 
+#if defined(HAVE_SOCKADDR_UN)
 	struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 	(void)unlink(addr_un->sun_path);
+#endif
 
 	ret = EXIT_SUCCESS;
 
@@ -289,10 +291,12 @@ static int stress_socket_server(
 die_close:
 	(void)close(fd);
 die:
+#if defined(HAVE_SOCKADDR_UN)
 	if (addr) {
 		addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
 	}
+#endif
 
 	if (pid) {
 		(void)kill(pid, SIGALRM);
diff --git a/stress-socket.c b/stress-socket.c
index 71136b6c..8411fb8d 100644
--- a/stress-socket.c
+++ b/stress-socket.c
@@ -226,7 +226,8 @@ retry:
 		(void)close(fd);
 	} while (keep_stressing());
 
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	if (socket_domain == AF_UNIX) {
 		struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
@@ -415,7 +416,8 @@ static int stress_sctp_server(
 die_close:
 	(void)close(fd);
 die:
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 	if (addr && (socket_domain == AF_UNIX)) {
 		struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 		(void)unlink(addr_un->sun_path);
diff --git a/stress-udp.c b/stress-udp.c
index 3d82c07c..6d5f17f4 100644
--- a/stress-udp.c
+++ b/stress-udp.c
@@ -151,7 +151,8 @@ again:
 			(void)close(fd);
 		} while (keep_stressing());
 
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 		if ((udp_domain == AF_UNIX) && addr) {
 			struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 			(void)unlink(addr_un->sun_path);
@@ -230,7 +231,8 @@ again:
 die_close:
 		(void)close(fd);
 die:
-#if defined(AF_UNIX)
+#if defined(AF_UNIX) &&		\
+    defined(HAVE_SOCKADDR_UN)
 		if ((udp_domain == AF_UNIX) && addr) {
 			struct sockaddr_un *addr_un = (struct sockaddr_un *)addr;
 			(void)unlink(addr_un->sun_path);
diff --git a/test/test-sockaddr_un.c b/test/test-sockaddr_un.c
new file mode 100644
index 00000000..ababcec2
--- /dev/null
+++ b/test/test-sockaddr_un.c
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2013-2021 Canonical, Ltd.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ * This code is a complete clean re-write of the stress tool by
+ * Colin Ian King <colin.king@canonical.com> and attempts to be
+ * backwardly compatible with the stress tool by Amos Waterland
+ * <apw@rossby.metr.ou.edu> but has more stress tests and more
+ * functionality.
+ *
+ */
+#include <sys/socket.h>
+#include <sys/un.h>
+
+int main(void)
+{
+	struct sockaddr_un addr;
+
+	(void)addr;
+
+	return sizeof(addr);
+}
-- 
2.32.0

