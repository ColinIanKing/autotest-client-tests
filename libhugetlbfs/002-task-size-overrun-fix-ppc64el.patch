From 737f4b61367c8524c6055f394932c05754e6d962 Mon Sep 17 00:00:00 2001
From: Anshuman Khandual <khan...@linux.vnet.ibm.com>
Date: Fri, 22 Sep 2017 08:26:05 +0530
Subject: [PATCH 2/3] task-size-overrun: Increase allocation size and
 accommodate 512TB VA space

Some of the archs have now 128TB VA space by default and may be expanded upto
512TB with hint address mechanism. This makes find_last_mapped() very slow
using base page size increments each time. On POWER, its kind of takes for
ever. This change increments the allocation chunk size during each attempt
and accommodates upto 512TB VA space on POWER.

Signed-off-by: Anshuman Khandual <khandual@linux.vnet.ibm.com>
Code conflict with Santhosh's commit 02df38e, conflict resolved.
Signed-off-by: Po-Hsu Lin <po-hsu.lin@canonical.com>
---
 tests/task-size-overrun.c | 32 +++++++++++++++++++++++++-------
 1 file changed, 25 insertions(+), 7 deletions(-)

diff --git a/tests/task-size-overrun.c b/tests/task-size-overrun.c
index dc9ce0e..87a9dfc 100644
--- a/tests/task-size-overrun.c
+++ b/tests/task-size-overrun.c
@@ -33,6 +33,10 @@
 
 #define MAPS_BUF_SZ 4096
 
+#if defined(__powerpc64__)
+#define	ADDR_MARK_128TB	(1UL << 47) /* First address beyond 128TB */
+#endif
+
 static unsigned long find_last_mapped(void)
 {
 	FILE *f;
@@ -68,24 +72,38 @@ static unsigned long find_task_size(void)
 {
 	unsigned long addr;
 	void *p;
+#if defined(__powerpc64__)
+	int crossed_128TB = 0;
+#endif
 
 	addr = find_last_mapped();
 	if (!addr || ((addr % getpagesize()) != 0))
 		FAIL("Bogus stack end address, 0x%lx!?", addr);
 
 	while (addr) {
-		p = mmap64((void *)addr, getpagesize(), PROT_READ,
+#if defined(__powerpc64__)
+		unsigned long size = getpagesize() * 1024;
+#else
+		unsigned long size = getpagesize();
+#endif
+		p = mmap64((void *)addr, size, PROT_READ,
 			   MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, -1, 0);
 		if (p == MAP_FAILED) {
 			verbose_printf("Searching map failed: %s\n", strerror(errno));
-			return addr;
-		}
-		munmap(p, getpagesize());
-		addr += getpagesize();
+
 #if defined(__powerpc64__)
-		if (addr > (1UL << 46) && addr < (1UL << 49))
-			addr = 1UL << 49;
+			if (!crossed_128TB) {
+				if (addr + size > ADDR_MARK_128TB) {
+					crossed_128TB = 1;
+					addr = ADDR_MARK_128TB;
+					continue;
+				}
+			}
 #endif
+			return addr;
+		}
+		munmap(p, size);
+		addr += size;
 #if defined(__s390x__)
 		if (addr > (1UL << 42) && addr < (1UL << 53))
 			addr = 1UL << 53;
-- 
2.7.4

