#!/bin/bash
#
# This is the most basic of kvm tests. It just verifies that the
# installed host can launch a kvm instance and that we can get
# the lsb_release -c from that instance.
#
set -x
SUT=bjf-test
SSH_KEY="$HOME/.ssh/id_rsa"
SSH_OPTIONS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -i $SSH_KEY"
DISTRO="`lsb_release -c | awk '{print$2}'`"
ARCHITECTURE="$1"

if [ -z "$ARCHITECTURE" ]; then
    echo "** Architecture not specified, please run this script with a given arch."
    exit 1
fi

# Assume that if kvm-ok fails, we are not suppring kvm on this instance type
#
kvm-ok
if [ $? != 0 ]; then
    echo "** kvm-ok failed. Assuming kvm is not supported on this instance type."
    exit 0
fi

# Generate an ssh key so we can run commands on the KVM instance that we
# create.
#
[ ! -f $SSH_KEY ] && ssh-keygen -f $SSH_KEY -t rsa -N ''

# On ppc64el, we need to disable SMT in order for libvirt use of KVM to work.
if [ "${ARCHITECTURE}" = "ppc64el" ] ; then
    sudo ppc64_cpu --smt=off
fi

# Download a release image that can be used to create the KVM instance.
#
image=`uvt-simplestreams-libvirt query | grep -P $DISTRO.*$ARCHITECTURE`
[ -z "$image" ] && uvt-simplestreams-libvirt sync --source http://cloud-images.ubuntu.com/daily release=$DISTRO arch=$ARCHITECTURE

uvt-kvm create $SUT release=$DISTRO arch=$ARCHITECTURE
uvt-kvm wait $SUT --insecure --ssh-private-key-file $SSH_KEY
ssh $SSH_OPTIONS ubuntu@`uvt-kvm ip $SUT` uname -a
RESULT=`ssh $SSH_OPTIONS ubuntu@\`uvt-kvm ip $SUT\` lsb_release -c | cut -d$'\t' -f 2`
if [ "$RESULT" != "$DISTRO" ]; then
    echo "** ERROR: The codename returned from lsb_release -c was (" $RESULT ") and we were expecting '$DISTRO'"
    exit 1
fi
uvt-kvm destroy $SUT

# On ppc64el, we need to turn SMT back on after the test.
if [ "${ARCHITECTURE}" = "ppc64el" ] ; then
    sudo ppc64_cpu --smt=on
fi
